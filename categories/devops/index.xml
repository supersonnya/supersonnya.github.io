<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devops on Sonnya</title>
    <link>https://supersonnya.github.io/categories/devops/</link>
    <description>Recent content in devops on Sonnya</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 11 Nov 2022 14:48:11 +0800</lastBuildDate><atom:link href="https://supersonnya.github.io/categories/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JumpServer</title>
      <link>https://supersonnya.github.io/operation/devops/devops-jumpserver/</link>
      <pubDate>Fri, 11 Nov 2022 14:48:11 +0800</pubDate>
      
      <guid>https://supersonnya.github.io/operation/devops/devops-jumpserver/</guid>
      <description>堡垒机 通过堡垒机控制IT系统运维风险。 统一入口、批量管理、自动运维、安全运营。 身份鉴别、账号管理、权限控制、安全审计。 审计只是事后行为，无法防止问题发生。 事先严格监控，从源头解决服务器误操作问题。 堡垒机能够创建系统账号，但账号只是区分角色功能，无法确认账号的执行人。 跳板机的缺陷，企业需要更新、更好、更安全的技术理念管理服务器的运维操作，需要一种能够满足角色管理、角色授权、信息资源访问控制、操作记录和审计、系统变更维护控制等需求，生成服务器资产统计报表功能。 核心作用 系统运维和安全审计管理；过滤和拦截非法请求访问、恶意攻击，拒绝不合法命令，进行审计监控、报警和责任追踪；报警、记录、分析、处理。 解决运维权限混乱、操作无审计的问题。 核心功能 单点登录；账号管理；身份认证；资源授权；访问控制；操作审计。 应用场景 多用户使用同一个账号； 一个用户使用多个账号； 缺少统一的权限管理平台，无法实现高粒度的命令权限控制； 对于传统的网络设备无法对运维人员的远程连接命令进行加密、审计。 企业角度 通过更加细致的粒度对企业IT资产设备进行管理，保证企业的IT设备资产安全、可靠运行，降低人为操作的风险，避免风险性，保证企业的资源资金安全。 管理角度 一次登录即可快捷访问多台设备，提升工作效率，对服务器最大化的安全性操作。 跳板机 跳板机：一台服务器，必须先连接跳板机才能去操控内网中的服务器。
仅实现了服务器安全登录，没有实现对运维人员的行为操控和审计，使用过程中可能出现误操作，无法定位实施人。 集中式对服务器进行管理。 </description>
    </item>
    
    <item>
      <title>Zabbix</title>
      <link>https://supersonnya.github.io/operation/devops/devops-zabbix/</link>
      <pubDate>Tue, 08 Nov 2022 23:28:41 +0800</pubDate>
      
      <guid>https://supersonnya.github.io/operation/devops/devops-zabbix/</guid>
      <description>监控分类 硬件监控 通过远程控制卡：Dell的IDRAC，HP的ILO和IBM的IMM等； 使用IPMI完成物理设备的监控工作，通常必须监控温度、硬盘故障等； 路由器、交换机（端口、光衰、日志）、打印机、系统等。 系统监控 CPU，内存、硬盘使用率，硬盘IO，系统负载，进程数。 服务监控 apache、nginx、php-fpm、mysql、memcache、redis、tomcat、JVM、TCP连接数等。 性能监控 网站性能、服务器性能、数据库性能、存储性能。 日志监控 系统日志、应用访问日志、错误日志、服务影讯日志，可使用ELK进行日志监控。 安全监控 图形化展示不同攻击类型统计； 监控登录用户数，passwd文件，本地文件的改动。 网络监控 端口、WEB|URL、DB、ping包、IDC带宽网络流量、网络流入流出速率、网络入出流量、网络使用率、SMTP、POP3。 完善的监控系统的特点 基本要求 监控系统能够自定义监控的内容，自己通过脚本采集所需的数据； 数据需要存入数据库，以便之后对数据进行分析计算； 监控系统可以简易、快速地部署到服务器； 数据可视化直观清晰。 监控工具 Cobbler、SALTSTACK、Kubernetes、Zabbix、elastic、Jenkins。 异常告警通知 可以定义复杂度告警逻辑，做到监控项之间的关联告警，例如程序之间的依赖检测，而不是只单独检测某一个指标； 告警可以确认响应，让运维组内的人知道已经有人在处理告警； 告警方式可以自定义，如短信、邮件； 告警内容可以自定义，能够写入一些简单的分析，便于运维人员直观了解数据； 告警后可以预处理一些任务，例如自我修复、重启、采集数据等。 协同工作 监控系统有强大的API，提供给外部调用； 监控数据有开放性和主流的数据结构，便于解析； 监控可视化可使用简易的插件，而非复杂的JS文件。 Zabbix简介 Zabbix介绍 Zabbix是一种网络监视、管理系统，基于CS架构，可用于监视各种网络服务、服务器和网络机器等的状态。 Zabbix使用各种数据库存储数据，如MySQL、PostgreSQL、SQLite、Oracle、DB2等。Server端基于C，Web管理端基于PHP。 Zabbix可使用多种监控方式：只使用Simple Check不安装客户端；也可基于SMTP或HTTP等协议定制监控。 Zabbix自带的Item满足普通监控需求，也可自定义Item，自动生成报表，同时提供外部API。 Zabbix优势 支持自定义监控脚本，提供需要输出的值即可； 存储的数据库表结构逻辑清晰； 通过模板可以便捷部署一组监控项； 每个监控项都可看到历史记录，且界面友好； 强大的触发器定义规则，可定义复杂的告警逻辑； 支持短信、邮件、微信等告警方式，提供告警确认机制； 触发告警后，可远程执行系统命令； 有原生的PHP绘图模块。 Zabbix术语 zabbix server：服务端，收集数据，写入数据。 zabbix agent：部署在被监控机器上，是一个进程，与zabbix server进行交互，负责执行命令。 host：监控的实体主机对象。 hosts：实体主机组。 applications：应用。 events：事件。 media：发送通知的通道。 remote command：远程命令。 template：模板。 item：监控项。 trigger：触发器，定义告警逻辑，有正常、异常、未知三个状态。 action：触发器事件出发后，指定的动作。 Zabbix程序组件 zabbix_server：服务器守护进程。 zabbix_agentd：agent守护进程。 zabbix_proxy：代理服务器。 zabbix_database：数据库系统。 zabbix_web：可视化界面。 zabbix_get：命令行工具，测试向agent发起数据采集请求。 zabbix_sender：命令行工具，测试向server发送数据。 zabbix_java_gateway：Java网关。 Zabbix Server安装 ## 查看IP ifconfig eth0 | awk &amp;#39;NR==2{print $2}&amp;#39; ## 关闭防火墙 sed -i &amp;#39;s/SELINUX=enforcing/SELINUX=disabled/&amp;#39; /etc/selinux/config systemctl disable --now firewalld ## 获取zabbix下载源 rpm -Uvh http://mirrors.</description>
    </item>
    
    <item>
      <title>Ansible基础</title>
      <link>https://supersonnya.github.io/operation/devops/devops-ansible/</link>
      <pubDate>Wed, 12 Oct 2022 09:05:24 +0800</pubDate>
      
      <guid>https://supersonnya.github.io/operation/devops/devops-ansible/</guid>
      <description>ansible简介 ansible的特点 部署简单，没有客户端，只需在主控端部署ansible环境，被控端无需安装客户端； 模块化：调用特定的模块，完成特定任务； 默认使用SSH协议对设备进行管理； 主从集中化管理； 配置简单、功能强大、扩展性强； 支持API及自定义模块，可通过Python轻松扩展； 通过playbooks来定制强大的配置、状态管理 对云计算平台、大数据有很好的支持； 具有幂等性：一个操作在一个主机上执行一遍和执行N遍的结果是一样的。 ansible工作机制 ansible在管理节点将ansible模块通过SSH协议推送到被管理端执行，执行完之后自动删除，可以使用SVN等来管理自定义模块及编排。 ansible基于模块工作，本身没有批量部署的能力。真正具有批量部署的是ansible运行的模块，ansible只是提供一种框架。 Ansible： ansible的核心模块； Host Inventory：被管理的主机列表； Playbooks：ansible的执行脚本，批量执行任务； Core Modules：ansible的核心模块； Custom Modules：自定义模块； Connection Plugins：连接插件，用于与被管控主机之间基于SSH建立连接关系 Plugins：其他插件，包括记录日志等。 ansible安装 Ubuntu22安装ansible ## 更新软件包索引, 安装software-properties-common ## software-properties-common用于管理独立的软件存储库 sudo apt update sudo apt install software-properties-common ## 添加ansible PPA sudo apt-add-repository ppa:ansible/ansible ## 更新软件包索引, 安装ansible sudo apt update sudo apt install ansible ansible命令 基本命令 ## 查看ansible的版本 ansible --version ## 查看组下所有主机IP ansible all --list ## ansible的命令参数 ## 语法ansible [-i 主机文件] [-f 批次] [组名] [-m 模块名称] [-a 模块参数] -v	## 详细模式，如果执行成功，输出详细结果 -i	## 指定host文件路径，默认/etc/ansible/hosts -f,-forks=NUM	## NUM默认是整数5，指定fork开启同步进程的个数 -m	## 指定使用的module名称，默认command模块 -a	## 指定模块的参数 -k	## 提示输入SSH密码，而不是使用基于ssh密钥认证 -sudo ## 指定使用sudo获取root权限 -K	## 提示输入sudo密码 -u	## 指定移动端的执行用户 -C	## 测试命令执行会改变什么内容，不会真正的去执行 ansible-doc ## 列出所有模块列表 ansible-doc -l ## 查看指定模块的参数 ansible-doc -s &amp;lt;modulename&amp;gt; ansible的使用 自定义配置连接 ## 配置路径/etc/ansible/hosts ansible_ssh_port ## 指定ssh端口 ansible_ssh_user ## 指定 ssh 用户 ansible_ssh_pass ## 指定 ssh 用户登录是认证密码 ansible_sudo_pass ## 指明 sudo 时候的密码 ssh密钥访问 ssh-keygen ssh-copy-id username@host_ip 测试命令 ansible -m command -a &amp;#34;free -m &amp;#34; webservers ansible -m command -a &amp;#34;useradd sonnya&amp;#34; webservers ansible -m command -a &amp;#34;id sonnya&amp;#34; web-servers ansible高级用法 常用模块 3个远程模块的区别 command：ansible的默认模块，不指定-m参数时，使用command模块；常见的命令都可使用，但命令的执行不是通过shell来执行的，&amp;lt;, &amp;gt;, |, &amp;amp;这些操作不可用，不支持管道，无法批量执行命令； shell模块：使用shell模块时默认通过/bin/sh执行，在终端输入的各种命令都可使用； scripts模块：使用scripts模块可在本地写一个脚本，在远程服务器上执行。 copy模块 实现主控端向目标主机拷贝文件，类似scp。 ansible webservers -m copy -a &amp;quot;src=https://supersonnya.github.io/etc/hosts dest=/root owner=root group=root mode=0777&amp;quot; file模块 给文件设置权限。 ansible webservers -m file -a &amp;quot;path=/etc/hosts mode=0755&amp;quot; stat模块 获取远程文件信息。 ansible webservers -m stat -a &amp;quot;path=/etc/hosts&amp;quot; get_url模块 实现远程主机下载指定的url地址，支持sha256sum文件校验。 ansible webservers -m get_url -a &amp;quot;url=https://xxx dest=/tmp/ mode=0440 force=yes&amp;quot; yum模块 管理软件包。 ansible webservers -m yum -a &amp;quot;name=httpd state=installed&amp;quot; cron模块 远程管理主机crontab配置。 ansible webservers -m cron -a &amp;quot;name=&#39;echo_hello&#39; minute=&#39;*/30&#39; job=&#39;echo hello&#39;&amp;quot; service模块 远程管理主机系统服务。 ansible webservers -m service -a &amp;quot;name=httpd state=restarted&amp;quot; user模块 管理远程主机的用户。 ansible webservers -m user -a &amp;quot;name=sonnya state=present&amp;quot; </description>
    </item>
    
  </channel>
</rss>
