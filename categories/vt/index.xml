<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vt on Sonnya</title>
    <link>https://supersonnya.github.io/categories/vt/</link>
    <description>Recent content in vt on Sonnya</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 24 Feb 2023 17:37:36 +0800</lastBuildDate><atom:link href="https://supersonnya.github.io/categories/vt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>vSphere</title>
      <link>https://supersonnya.github.io/operation/vt/vt-vsphere/</link>
      <pubDate>Fri, 24 Feb 2023 17:37:36 +0800</pubDate>
      
      <guid>https://supersonnya.github.io/operation/vt/vt-vsphere/</guid>
      <description>关闭OpenSLP服务 ## 在主机上开启ssh服务 ## 关闭slpd服务进程 /etc/init.d/slpd stop ## 禁用slpd服务 esxcli network firewall ruleset set -r CIMSLP -e 0 ## 禁止开启启动 chkconfig slpd off /etc/init.d/slpd status chkconfig --list | grep slpd ## 禁用CIM服务 /etc/init.d/sfcbd-watchdog stop chkconfig sfcbd-watchdog off </description>
    </item>
    
    <item>
      <title>Virtualization Vmware_network</title>
      <link>https://supersonnya.github.io/operation/vt/vt-vmware_network/</link>
      <pubDate>Tue, 16 Aug 2022 17:37:36 +0800</pubDate>
      
      <guid>https://supersonnya.github.io/operation/vt/vt-vmware_network/</guid>
      <description>一、虚拟设备概念 VMnet0：用于虚拟桥接网络下的虚拟交换机 VMnet1：用于虚拟Host-Only网络下的虚拟交换机 VMnet8：用于虚拟NAT网络下的虚拟交换机 VMware Network AdepterVMnet1：Host用于与Host-Only虚拟网络进行通信的虚拟网卡 VMware Network Adepter VMnet8：Host用于与NAT虚拟网络进行通信的虚拟网卡 网桥是一个局域网与另一个局域网之间建立连接的桥梁，是扩展网络和通信的手段，在各种传输介质中转发数据信号，扩展网络的距离。VMWare中，虚拟网卡连接到VMnet0虚拟交换机上才会应用虚拟网桥。 虚拟网卡连接到VMnet1或VMnet8虚拟交换机时，自动安装运行虚拟DHCP服务并连接至虚拟交换机。 虚拟NAT服务器，虚拟网卡连接到VMnet8时自动安装运行虚拟NAT服务器，并连接至虚拟交换机。 主机虚拟网卡与相同名称的虚拟交换机相连。 二、三种连接模式 1、桥接 在这种模式下，VMware虚拟出来的操作系统就像是局域网中的一台独立的主机，可以访问网内任何一台机器。需要手工为虚拟系统配置IP地址、子网掩码，而且还要和宿主机器处于同一网段，这样虚拟系统才能和宿主机器进行通信。同时，由于这个虚拟系统是局域网中的一个独立的主机系统，那么就可以手工配置它的TCP/IP配置信息，以实现通过局域网的网关或路由器访问互联网。 宿主机物理网卡和虚拟网卡通过VMnet0虚拟交换机进行桥接，可以选择桥接对象，物理网卡和虚拟网卡处于同一个网段，可以互相ping通。 2、HostOnly 在Host-Only模式下，虚拟网络是一个全封闭的网络，它唯一能够访问的就是主机，各个虚拟机内部可以互相通信。其实Host-Only网络和NAT网络很相似，不同的地方就是 Host-Only网络没有NAT服务，所以虚拟网络不能连接到Internet。主机和虚拟机之间的通信是通过VMnet1虚拟网卡来实现的。此时如果想要虚拟机上外网则需要主机联网并且网络共享。 3、NAT 使用NAT模式，就是让虚拟系统借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网，使用NAT模式可以实现在虚拟系统里访问互联网。NAT模式下的虚拟系统的TCP/IP配置信息是由VMnet8(NAT)虚拟网络的DHCP服务器提供的，无法进行手工修改，因此虚拟系统也就无法和本局域网中的其他真实主机进行通讯。采用NAT模式最大的优势是虚拟系统接入互联网非常简单，不需要进行任何其他的配置，只需要主机器能访问互联网即可。这种情况下，主机可以ping通虚拟机，虚拟机也能ping通主机。 VMnet8虚拟网卡知识为宿主机和NAT虚拟网络下的虚拟机提供一个接口，卸载虚拟网卡后虚拟机仍可以上网，但宿主机无法再访问VMnet8网段。 宿主机需要同时开启NAT和DHCP服务。 三、总结 共享连接方式和NAT方式，都可以实现虚拟机和主机，虚拟机和互联网通信，NAT方式设置简单，且可以实现同时访问多个物理网卡。桥接方式可实现虚拟机和主机，虚拟机和互联网通信，若虚拟机作为服务器，只有这种方式可行。但需独立的IP给虚拟机，且若物理网卡连接断开，虚拟机与主机也不能连接。host-only方式只实现虚拟机主机通信，一般不单独采用。 完整克隆与链接克隆 链接克隆：与原始虚拟机共享虚拟磁盘，不能脱离原始虚拟机独立运行。克隆所需时间短，节省物理磁盘空间。 完整克隆：不和原始虚拟机共享任何资源，可独立使用。 修改主机名； 修改虚拟网卡MAC地址：随机生成IP，删除相关配置，下次重启时自动刷新； IP地址； KEYS ## 17 - 4A4RR-813DK-M81A9-4U35H-06KND - NZ4RR-FTK5H-H81C1-Q30QH-1V2LA - 4C21U-2KK9Q-M8130-4V2QH-CF810 - MC60H-DWHD5-H80U9-6V85M-8280D - JU090-6039P-08409-8J0QH-2YR7F - 4Y09U-AJK97-089Z0-A3054-83KLA ## Fusion13.0 - 4A4RR-813DK-M81A9-4U35H-06KND - NZ4RR-FTK5H-H81C1-Q30QH-1V2LA - 4C21U-2KK9Q-M8130-4V2QH-CF810 - MC60H-DWHD5-H80U9-6V85M-8280D - JU090-6039P-08409-8J0QH-2YR7F - 4Y09U-AJK97-089Z0-A3054-83KLA ## 16.x - ZF3R0-FHED2-M80TY-8QYGC-NPKYF - Z1ZPR-EDGQN-M1JE9-HYFGX-YPGEX ## 15.</description>
    </item>
    
    <item>
      <title>Docker安装及使用</title>
      <link>https://supersonnya.github.io/operation/vt/vt-container_docker_install_use/</link>
      <pubDate>Sun, 09 Aug 2020 14:10:02 +0800</pubDate>
      
      <guid>https://supersonnya.github.io/operation/vt/vt-container_docker_install_use/</guid>
      <description>安装Docker # install docker yum insatall docker-io # start docker systemctl start docker # check if installed successfully ps -ef|grep docker # restart docker systemctl restart docker # stop docker systemctl stop docker Docker安装Mysql # install mysql in docker ## search mysql docker search mysql ## instal mysql docker pull mysql ## check images docker images ## build directory cd /opt/ mkdir mysql_docker cd mysql_docker/ echo $PWD # start mysql docker run --name mysqlserver -v $PWD/conf:/etc/mysql/conf.</description>
    </item>
    
    <item>
      <title>Docker基础命令</title>
      <link>https://supersonnya.github.io/operation/vt/vt-container_dokcer_basicalcmds/</link>
      <pubDate>Sun, 09 Aug 2020 13:15:42 +0800</pubDate>
      
      <guid>https://supersonnya.github.io/operation/vt/vt-container_dokcer_basicalcmds/</guid>
      <description>Docker 信息 sudo docker version：查看Docker版本信息。 sudo docker info：显示Docker Engine的相关信息。 容器生命周期 start/stop/restart # 启动一个或多个已经被停止的容器 docker start [OPTIONS] CONTAINER [CONTAINER...] # 停止一个运行中的容器 docker stop [OPTIONS] CONTAINER [CONTAINER...] # 重启容器 docker restart [OPTIONS] CONTAINER [CONTAINER...] rm # 删除一个或多个容器 docker rm [OPTIONS] CONTAINER [CONTAINER...] exec # 在运行的容器中执行命令 docker exec [OPTIONS] CONTAINER COMMAND [ARG...] docker exec -it container_id /bin/bash 容器操作 ps # 列出容器 docker ps [OPTIONS] 镜像仓库 login # 登陆Docker镜像仓库，默认为官方仓库 Docker Hub docker login -u username -p pwd # 登出Docker镜像仓库，默认为官方仓库 Docker Hub docker logout pull # 从镜像仓库中拉取或更新指定镜像 docker pull [OPTIONS] NAME[:TAG|@DIGEST] push # 本地镜像上传到镜像仓库 docker push [OPTIONS] NAME[:TAG] search # 从Docker hub查找镜像 docker search [OPTIONS] term 本地镜像管理 image # 列出本地镜像 docker images rmi # 删除本地镜像 docker rmi [OPTIONS] IMAGE [IMAGE.</description>
    </item>
    
  </channel>
</rss>
